using EVCharging.BE.Common.DTOs.Shared;
using EVCharging.BE.Common.DTOs.Stations;
using EVCharging.BE.Services.DTOs;
using EVCharging.BE.Services.Services.Charging;
using EVCharging.BE.Services.Services.Common;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace EVCharging.BE.API.Controllers
{
    /// <summary>
    /// Controller cho ch·ª©c nƒÉng Geocoding - Chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ sang t·ªça ƒë·ªô
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class GeocodingController : ControllerBase
    {
        private readonly ILocationService _locationService;
        private readonly IChargingStationService _stationService;

        public GeocodingController(
            ILocationService locationService,
            IChargingStationService stationService)
        {
            _locationService = locationService;
            _stationService = stationService;
        }

        /// <summary>
        /// üåç Chuy·ªÉn ƒë·ªãa ch·ªâ sang t·ªça ƒë·ªô (Geocoding)
        /// </summary>
        /// <remarks>
        /// V√≠ d·ª• request body:
        /// ```json
        /// {
        ///   "address": "123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM",
        ///   "countryCode": "VN",
        ///   "language": "vi"
        /// }
        /// ```
        /// **L∆∞u √Ω**: 
        /// - language ph·∫£i d√πng m√£ ISO 639-1: "vi" (kh√¥ng ph·∫£i "vietnamese")
        /// - countryCode: "VN" cho Vi·ªát Nam
        /// </remarks>
        /// <param name="request">Th√¥ng tin ƒë·ªãa ch·ªâ</param>
        /// <returns>T·ªça ƒë·ªô (latitude, longitude) v√† th√¥ng tin chi ti·∫øt</returns>
        [HttpPost("convert")]
        public async Task<ActionResult<GeocodingResponseDTO>> GeocodeAddress([FromBody] GeocodingRequestDTO request)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(request.Address))
                {
                    return BadRequest(new { message = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ" });
                }

                var result = await _locationService.GeocodeAddressAsync(request);

                if (!result.Success)
                {
                    return BadRequest(new 
                    { 
                        message = "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ", 
                        error = result.ErrorMessage,
                        hint = "H√£y th·ª≠ nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß h∆°n ho·∫∑c ki·ªÉm tra l·∫°i ch√≠nh t·∫£",
                        data = result 
                    });
                }

                return Ok(new { message = "Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng", data = result });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "L·ªói khi chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ", error = ex.Message });
            }
        }

        /// <summary>
        /// üîç T√¨m tr·∫°m s·∫°c g·∫ßn ƒë·ªãa ch·ªâ c·ªßa b·∫°n - ƒê∆°n gi·∫£n nh·∫•t!
        /// </summary>
        /// <remarks>
        /// **C√°ch d√πng ƒë∆°n gi·∫£n:**
        /// 
        /// GET /api/Geocoding/nearby?address=Bitexco Tower, Qu·∫≠n 1, TP.HCM
        /// 
        /// **Ho·∫∑c v·ªõi tham s·ªë ƒë·∫ßy ƒë·ªß:**
        /// 
        /// GET /api/Geocoding/nearby?address=ƒê·∫°i h·ªçc FPT&amp;radiusKm=15&amp;countryCode=VN
        /// 
        /// H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông:
        /// 1. Chuy·ªÉn ƒë·ªãa ch·ªâ ‚Üí t·ªça ƒë·ªô
        /// 2. T√¨m tr·∫°m s·∫°c g·∫ßn nh·∫•t
        /// </remarks>
        /// <param name="address">ƒê·ªãa ch·ªâ c·ªßa b·∫°n</param>
        /// <param name="radiusKm">B√°n k√≠nh t√¨m ki·∫øm (km) - M·∫∑c ƒë·ªãnh: 10km</param>
        /// <param name="countryCode">M√£ qu·ªëc gia - M·∫∑c ƒë·ªãnh: VN</param>
        /// <returns>Danh s√°ch tr·∫°m s·∫°c g·∫ßn ƒë·ªãa ch·ªâ</returns>
        [HttpGet("nearby")]
        public async Task<ActionResult> FindNearbyStations(
            [FromQuery] string address,
            [FromQuery] double radiusKm = 10,
            [FromQuery] string countryCode = "VN")
        {
            try
            {
                if (string.IsNullOrWhiteSpace(address))
                {
                    return BadRequest(new { message = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ (address)" });
                }

                // B∆∞·ªõc 1: Chuy·ªÉn ƒë·ªãa ch·ªâ ‚Üí t·ªça ƒë·ªô
                var coordinates = await _locationService.GetCoordinatesFromAddressAsync(address, countryCode);

                if (coordinates == null)
                {
                    return NotFound(new 
                    { 
                        message = "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ",
                        hint = "H√£y th·ª≠ nh·∫≠p ƒë·ªãa ch·ªâ r√µ r√†ng h∆°n, v√≠ d·ª•: 'Bitexco Tower, District 1, Ho Chi Minh City'"
                    });
                }

                // B∆∞·ªõc 2: T√¨m tr·∫°m s·∫°c g·∫ßn t·ªça ƒë·ªô
                var filter = new StationSearchDTO
                {
                    Latitude = coordinates.Value.latitude,
                    Longitude = coordinates.Value.longitude,
                    MaxDistanceKm = radiusKm
                };

                var stations = await _stationService.SearchStationsAsync(filter);

                return Ok(new
                {
                    message = "T√¨m ki·∫øm th√†nh c√¥ng! üéâ",
                    yourLocation = new
                    {
                        address,
                        latitude = coordinates.Value.latitude,
                        longitude = coordinates.Value.longitude,
                        googleMapsUrl = $"https://www.google.com/maps?q={coordinates.Value.latitude},{coordinates.Value.longitude}"
                    },
                    searchRadius = $"{radiusKm} km",
                    totalFound = stations.Count(),
                    stations
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "L·ªói khi t√¨m ki·∫øm", error = ex.Message });
            }
        }

        /// <summary>
        /// üìç T√≠nh kho·∫£ng c√°ch t·ª´ ƒë·ªãa ch·ªâ ƒë·∫øn tr·∫°m s·∫°c
        /// </summary>
        /// <param name="fromAddress">ƒê·ªãa ch·ªâ xu·∫•t ph√°t</param>
        /// <param name="stationId">ID tr·∫°m s·∫°c ƒë√≠ch</param>
        /// <param name="countryCode">M√£ qu·ªëc gia - M·∫∑c ƒë·ªãnh: VN</param>
        /// <returns>Kho·∫£ng c√°ch v√† link ch·ªâ ƒë∆∞·ªùng Google Maps</returns>
        [HttpGet("distance")]
        public async Task<ActionResult> CalculateDistance(
            [FromQuery] string fromAddress,
            [FromQuery] int stationId,
            [FromQuery] string countryCode = "VN")
        {
            try
            {
                if (string.IsNullOrWhiteSpace(fromAddress))
                {
                    return BadRequest(new { message = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ xu·∫•t ph√°t (fromAddress)" });
                }

                // L·∫•y t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ
                var userCoords = await _locationService.GetCoordinatesFromAddressAsync(fromAddress, countryCode);
                if (userCoords == null)
                {
                    return NotFound(new { message = "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ xu·∫•t ph√°t" });
                }

                // L·∫•y th√¥ng tin tr·∫°m
                var station = await _stationService.GetByIdAsync(stationId);
                if (station == null)
                {
                    return NotFound(new { message = $"Kh√¥ng t√¨m th·∫•y tr·∫°m s·∫°c ID {stationId}" });
                }

                if (!station.Latitude.HasValue || !station.Longitude.HasValue)
                {
                    return BadRequest(new { message = "Tr·∫°m n√†y ch∆∞a c√≥ th√¥ng tin v·ªã tr√≠" });
                }

                // T√≠nh kho·∫£ng c√°ch
                var distanceKm = _locationService.CalculateDistance(
                    userCoords.Value.latitude,
                    userCoords.Value.longitude,
                    station.Latitude.Value,
                    station.Longitude.Value
                );

                return Ok(new
                {
                    message = "T√≠nh to√°n th√†nh c√¥ng! üìè",
                    from = new
                    {
                        address = fromAddress,
                        latitude = userCoords.Value.latitude,
                        longitude = userCoords.Value.longitude
                    },
                    to = new
                    {
                        stationId = station.StationId,
                        name = station.Name,
                        address = station.Address,
                        latitude = station.Latitude.Value,
                        longitude = station.Longitude.Value
                    },
                    distance = new
                    {
                        km = Math.Round(distanceKm, 2),
                        meters = Math.Round(distanceKm * 1000, 0),
                        readableDistance = distanceKm < 1 
                            ? $"{Math.Round(distanceKm * 1000, 0)} m√©t" 
                            : $"{Math.Round(distanceKm, 1)} km"
                    },
                    directions = new
                    {
                        googleMapsUrl = $"https://www.google.com/maps/dir/?api=1&origin={userCoords.Value.latitude},{userCoords.Value.longitude}&destination={station.Latitude},{station.Longitude}&travelmode=driving",
                        description = $"Kho·∫£ng {Math.Round(distanceKm, 1)}km t·ª´ v·ªã tr√≠ c·ªßa b·∫°n ƒë·∫øn {station.Name}"
                    }
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "L·ªói khi t√≠nh kho·∫£ng c√°ch", error = ex.Message });
            }
        }
    }
}

